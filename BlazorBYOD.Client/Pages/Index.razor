@page "/"
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using System.Text.RegularExpressions
@inject HttpClient Http

<div class="container my-4">

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="mb-0">Upload PDFs</h3>
        <button class="btn btn-outline-secondary btn-sm" @onclick="ResetIndex">Reset Index</button>
    </div>

    <InputFile OnChange="UploadFiles" accept=".pdf,.docx,.txt" multiple class="form-control mb-2" />

    <ul class="mb-4 ps-3">
        @foreach (var status in uploadStatuses)
        {
            <li>@status</li>
        }
    </ul>

    <hr />

    <h3>Chat</h3>
    <ul class="list-group mb-3">
        @for (int i = 0; i < chatHistory.Count; i++)
        {
            var msg = chatHistory[i];
            if (msg.StartsWith("A: "))
            {
                <li class="list-group-item bg-light">
                    @((MarkupString)Markdown.ToHtml(ReplaceCitations(msg.Substring(3))))
                </li>
            }
            else
            {
                <li class="list-group-item fw-bold">
                    @msg
                </li>
            }
        }
    </ul>

    <div class="input-group mb-3" style="max-width: 500px;">
        <input class="form-control" @bind="currentMessage" @bind:event="oninput" @onkeydown="OnEnter" placeholder="Type your message..." />
        <button class="btn btn-primary" @onclick="SendChat" type="button">Send</button>
    </div>
</div>

@code {

    private static readonly Regex CitationRegex = new(
    @"<citation filename='([^']+)' page_number='([^']+)'>(.*?)<\/citation>",
    RegexOptions.IgnoreCase | RegexOptions.Singleline);

    private string ReplaceCitations(string markdown)
    {
        return CitationRegex.Replace(markdown, m =>
            $"{m.Groups[3].Value} [{m.Groups[1].Value}, p.{m.Groups[2].Value}]"
        );
    }

    private List<string> uploadStatuses = new();
    private List<string> chatHistory = new();
    private string currentMessage = "";

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        uploadStatuses.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            uploadStatuses.Add($"{file.Name}: Uploading...");
            StateHasChanged();

            using var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream(long.MaxValue)), "file", file.Name);

            var resp = await Http.PostAsync("/api/ingest", content);
            uploadStatuses[^1] = $"{file.Name}: Upload" + (resp.IsSuccessStatusCode ? " complete" : " failed");
            StateHasChanged();
        }
    }

    private async Task ResetIndex()
    {
        await Http.PostAsync("/api/reset", null);
    }

    private async Task SendChat()
    {
        if (string.IsNullOrWhiteSpace(currentMessage)) return;

        chatHistory.Add(currentMessage);
        chatHistory.Add("A: "); // Placeholder for answer
        StateHasChanged();

        var content = new StringContent(JsonSerializer.Serialize(currentMessage), System.Text.Encoding.UTF8, "application/json");
        using var request = new HttpRequestMessage(HttpMethod.Post, "/api/chat") { Content = content };
        request.SetBrowserResponseStreamingEnabled(true);

        using var response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

        var stream = await response.Content.ReadAsStreamAsync();
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

        await foreach (var chunk in JsonSerializer.DeserializeAsyncEnumerable<AiResponseDto>(stream, options))
        {
            if (chunk?.Text != null)
            {
                // Append each chunk to the last answer
                chatHistory[^1] += chunk.Text;
                StateHasChanged();
            }
        }

        currentMessage = "";
        StateHasChanged();
    }

    private void OnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = SendChat();
        }
    }
}
